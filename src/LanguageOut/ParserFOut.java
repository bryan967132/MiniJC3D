
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LanguageOut;

import java_cup.runtime.*;
import Painter.WordPainter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserFOut extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserFOut() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserFOut(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserFOut(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\042\002\000\002\004\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\030\003\000\002" +
    "\011\005\000\002\013\005\000\002\013\003\000\002\043" +
    "\002\000\002\014\007\000\002\014\003\000\002\015\007" +
    "\000\002\016\007\000\002\016\007\000\002\027\003\000" +
    "\002\031\003\000\002\024\007\000\002\044\002\000\002" +
    "\025\005\000\002\032\003\000\002\045\002\000\002\026" +
    "\011\000\002\046\002\000\002\026\006\000\002\022\011" +
    "\000\002\023\003\000\002\033\003\000\002\017\005\000" +
    "\002\017\004\000\002\020\004\000\002\020\003\000\002" +
    "\021\003\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\003\000\002\021\004\000\002\047\002" +
    "\000\002\021\006\000\002\050\002\000\002\021\006\000" +
    "\002\051\002\000\002\021\005\000\002\021\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\006\000\002\052\002" +
    "\000\002\006\007\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\004\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\040\003\000\002\041\003\000\002" +
    "\036\003\000\002\037\003\000\002\034\003\000\002\035" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\016\003\016\004\014\005\013\006\004\007" +
    "\012\010\020\001\002\000\006\021\uffcd\040\uffcd\001\002" +
    "\000\020\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\001\002\000\020\002\ufffb\003\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\001\002\000\020\002" +
    "\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\001\002\000\004\021\215\001\002\000\020\002\ufff9\003" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\001\002" +
    "\000\006\021\uffce\040\uffce\001\002\000\004\021\uffeb\001" +
    "\002\000\004\016\ufffd\001\002\000\004\021\026\001\002" +
    "\000\020\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\001\002\000\020\002\000\003\016\004\014" +
    "\005\013\006\004\007\012\010\020\001\002\000\006\021" +
    "\uffcc\040\uffcc\001\002\000\004\002\022\001\002\000\004" +
    "\002\001\001\002\000\020\002\uffff\003\uffff\004\uffff\005" +
    "\uffff\006\uffff\007\uffff\010\uffff\001\002\000\006\045\ufff3" +
    "\047\ufff3\001\002\000\004\037\043\001\002\000\012\037" +
    "\uffec\043\ufff2\045\ufff0\047\ufff0\001\002\000\006\045\031" +
    "\047\030\001\002\000\034\002\ufff5\003\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\021\ufff5\042\ufff5\001\002\000\004\021\033\001" +
    "\002\000\006\045\ufff4\047\ufff4\001\002\000\010\043\ufff2" +
    "\045\ufff0\047\ufff0\001\002\000\004\043\035\001\002\000" +
    "\014\017\uffb6\020\uffb6\021\uffb6\023\uffb6\037\uffb6\001\002" +
    "\000\014\017\037\020\040\021\046\023\041\037\043\001" +
    "\002\000\036\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5\036\uffc5\040" +
    "\uffc5\044\uffc5\047\uffc5\001\002\000\036\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\035\uffc4\036\uffc4\040\uffc4\044\uffc4\047\uffc4\001\002" +
    "\000\014\017\037\020\040\021\046\023\041\037\043\001" +
    "\002\000\022\006\004\007\012\010\020\017\037\020\040" +
    "\021\046\023\041\037\043\001\002\000\026\006\uffb2\007" +
    "\uffb2\010\uffb2\015\uffb2\017\uffb2\020\uffb2\021\uffb2\023\uffb2" +
    "\037\uffb2\040\uffb2\001\002\000\036\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\035\uffcb\036\uffcb\040\uffcb\044\uffcb\047\uffcb\001\002\000" +
    "\036\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\035\uffca\036\uffca\040\uffca\044" +
    "\uffca\047\uffca\001\002\000\040\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\035" +
    "\uffc6\036\uffc6\040\uffc6\043\uffc8\044\uffc6\047\uffc6\001\002" +
    "\000\032\022\062\023\050\024\060\025\057\026\052\030" +
    "\056\031\061\032\051\033\053\035\064\036\063\044\055" +
    "\001\002\000\014\017\037\020\040\021\046\023\041\037" +
    "\043\001\002\000\014\017\037\020\040\021\046\023\041" +
    "\037\043\001\002\000\014\017\037\020\040\021\046\023" +
    "\041\037\043\001\002\000\014\017\037\020\040\021\046" +
    "\023\041\037\043\001\002\000\006\045\ufff1\047\ufff1\001" +
    "\002\000\042\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\040\uffb5\044\uffb5\045\uffb5\047\uffb5\001\002\000\014" +
    "\017\037\020\040\021\046\023\041\037\043\001\002\000" +
    "\014\017\037\020\040\021\046\023\041\037\043\001\002" +
    "\000\014\017\037\020\040\021\046\023\041\037\043\001" +
    "\002\000\014\017\037\020\040\021\046\023\041\037\043" +
    "\001\002\000\014\017\037\020\040\021\046\023\041\037" +
    "\043\001\002\000\014\017\037\020\040\021\046\023\041" +
    "\037\043\001\002\000\014\017\037\020\040\021\046\023" +
    "\041\037\043\001\002\000\036\022\062\023\050\024\060" +
    "\025\057\026\052\030\uffb8\031\uffb8\032\uffb8\033\uffb8\035" +
    "\uffb8\036\uffb8\040\uffb8\044\uffb8\047\uffb8\001\002\000\036" +
    "\022\062\023\050\024\060\025\057\026\052\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\035\uffb7\036\uffb7\040\uffb7\044\uffb7" +
    "\047\uffb7\001\002\000\036\022\uffc2\023\uffc2\024\060\025" +
    "\057\026\052\030\uffc2\031\uffc2\032\uffc2\033\uffc2\035\uffc2" +
    "\036\uffc2\040\uffc2\044\uffc2\047\uffc2\001\002\000\036\022" +
    "\062\023\050\024\060\025\057\026\052\030\uffbb\031\uffbb" +
    "\032\051\033\053\035\064\036\063\040\uffbb\044\uffbb\047" +
    "\uffbb\001\002\000\036\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\035\uffc0\036" +
    "\uffc0\040\uffc0\044\uffc0\047\uffc0\001\002\000\036\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\035\uffbf\036\uffbf\040\uffbf\044\uffbf\047\uffbf" +
    "\001\002\000\036\022\062\023\050\024\060\025\057\026" +
    "\052\030\uffbc\031\uffbc\032\051\033\053\035\064\036\063" +
    "\040\uffbc\044\uffbc\047\uffbc\001\002\000\036\022\062\023" +
    "\050\024\060\025\057\026\052\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\035\uffb9\036\uffb9\040\uffb9\044\uffb9\047\uffb9\001" +
    "\002\000\036\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe\036\uffbe\040" +
    "\uffbe\044\uffbe\047\uffbe\001\002\000\036\022\062\023\050" +
    "\024\060\025\057\026\052\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\035\uffba\036\uffba\040\uffba\044\uffba\047\uffba\001\002" +
    "\000\036\022\uffc1\023\uffc1\024\060\025\057\026\052\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\040\uffc1" +
    "\044\uffc1\047\uffc1\001\002\000\004\043\035\001\002\000" +
    "\014\017\037\020\040\021\046\023\041\037\043\001\002" +
    "\000\032\022\062\023\050\024\060\025\057\026\052\030" +
    "\056\031\061\032\051\033\053\035\064\036\063\044\055" +
    "\001\002\000\036\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\035\uffc7\036\uffc7" +
    "\040\uffc7\044\uffc7\047\uffc7\001\002\000\004\040\106\001" +
    "\002\000\032\022\062\023\050\024\060\025\057\026\052" +
    "\030\056\031\061\032\051\033\053\035\064\036\063\040" +
    "\106\001\002\000\052\013\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\044\uffb1\047\uffb1\001\002\000\036\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\035\uffc3\036\uffc3\040\uffc3\044\uffc3\047\uffc3\001" +
    "\002\000\014\017\037\020\040\021\046\023\041\037\043" +
    "\001\002\000\036\022\062\023\050\024\060\025\057\026" +
    "\052\030\056\031\061\032\051\033\053\035\064\036\063" +
    "\040\uffc9\044\uffc9\047\uffc9\001\002\000\036\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\035\uffbd\036\uffbd\040\uffbd\044\uffbd\047\uffbd\001" +
    "\002\000\004\040\106\001\002\000\004\041\115\001\002" +
    "\000\026\003\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\021\uffb4\042\uffb4\001\002\000\020" +
    "\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\001\002\000\026\003\136\006\004\007\012\010\020" +
    "\011\133\012\126\013\137\014\132\021\122\042\121\001" +
    "\002\000\004\037\043\001\002\000\020\002\uffb3\003\uffb3" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\001\002\000" +
    "\012\034\uffe4\037\ufff6\043\uffe6\046\172\001\002\000\026" +
    "\003\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\021\uffd7\042\uffd7\001\002\000\026\003\136" +
    "\006\004\007\012\010\020\011\133\012\126\013\137\014" +
    "\132\021\122\042\121\001\002\000\004\021\033\001\002" +
    "\000\016\017\uffd3\020\uffd3\021\uffd3\023\uffd3\037\uffd3\047" +
    "\uffd1\001\002\000\004\047\161\001\002\000\026\003\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\021\uffdc\042\uffdc\001\002\000\020\002\uffde\003\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\001\002\000" +
    "\004\037\uffe0\001\002\000\004\037\uffe7\001\002\000\026" +
    "\003\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\021\uffdb\042\uffdb\001\002\000\004\037\043" +
    "\001\002\000\026\003\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\021\uffcf\042\uffcf\001\002" +
    "\000\004\021\uffd5\001\002\000\004\047\153\001\002\000" +
    "\004\047\152\001\002\000\004\037\043\001\002\000\014" +
    "\017\037\020\040\021\046\023\041\037\043\001\002\000" +
    "\032\022\062\023\050\024\060\025\057\026\052\030\056" +
    "\031\061\032\051\033\053\035\064\036\063\040\106\001" +
    "\002\000\004\013\146\001\002\000\004\021\uffe9\001\002" +
    "\000\004\047\uffea\001\002\000\004\021\151\001\002\000" +
    "\004\047\uffe8\001\002\000\026\003\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\021\uffd8\042" +
    "\uffd8\001\002\000\026\003\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\021\uffd9\042\uffd9\001" +
    "\002\000\004\021\155\001\002\000\004\047\156\001\002" +
    "\000\026\003\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\021\uffd4\042\uffd4\001\002\000\004" +
    "\040\106\001\002\000\004\047\ufff7\001\002\000\026\003" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\021\uffda\042\uffda\001\002\000\004\047\166\001" +
    "\002\000\014\017\037\020\040\021\046\023\041\037\043" +
    "\001\002\000\032\022\062\023\050\024\060\025\057\026" +
    "\052\030\056\031\061\032\051\033\053\035\064\036\063" +
    "\047\165\001\002\000\026\003\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\021\uffd2\042\uffd2" +
    "\001\002\000\026\003\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\021\uffd0\042\uffd0\001\002" +
    "\000\026\003\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\021\uffdd\042\uffdd\001\002\000\020" +
    "\002\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\001\002\000\004\043\035\001\002\000\026\003\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\021\uffd6\042\uffd6\001\002\000\004\034\174\001\002" +
    "\000\014\017\037\020\040\021\046\023\041\037\043\001" +
    "\002\000\032\022\062\023\050\024\060\025\057\026\052" +
    "\030\056\031\061\032\051\033\053\035\064\036\063\047" +
    "\uffe3\001\002\000\014\017\037\020\040\021\046\023\041" +
    "\037\043\001\002\000\032\022\062\023\050\024\060\025" +
    "\057\026\052\030\056\031\061\032\051\033\053\035\064" +
    "\036\063\044\055\001\002\000\004\034\201\001\002\000" +
    "\014\017\037\020\040\021\046\023\041\037\043\001\002" +
    "\000\032\022\062\023\050\024\060\025\057\026\052\030" +
    "\056\031\061\032\051\033\053\035\064\036\063\047\uffe5" +
    "\001\002\000\004\015\204\001\002\000\004\045\uffe1\001" +
    "\002\000\004\045\206\001\002\000\014\017\037\020\040" +
    "\021\046\023\041\037\043\001\002\000\032\022\062\023" +
    "\050\024\060\025\057\026\052\030\056\031\061\032\051" +
    "\033\053\035\064\036\063\040\106\001\002\000\004\047" +
    "\211\001\002\000\026\003\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\021\uffe2\042\uffe2\001" +
    "\002\000\004\016\213\001\002\000\020\002\ufffc\003\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\001\002\000" +
    "\004\037\043\001\002\000\004\037\uffec\001\002\000\004" +
    "\040\106\001\002\000\006\041\115\047\221\001\002\000" +
    "\020\002\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\001\002\000\020\002\uffef\003\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\022\002\020\003\016\004\006\011\010\012" +
    "\014\015\005\016\004\031\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\211\001\001\000\010\013" +
    "\026\014\023\027\024\001\001\000\002\001\001\000\016" +
    "\004\022\011\010\012\014\015\005\016\004\031\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\112\001" +
    "\001\000\004\043\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\031\001\001\000\002\001\001\000" +
    "\004\043\033\001\001\000\004\040\035\001\001\000\002" +
    "\001\001\000\012\006\046\007\043\010\044\034\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\111" +
    "\007\043\010\044\034\041\001\001\000\014\006\104\007" +
    "\043\010\044\012\103\034\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\077\001" +
    "\001\000\004\041\053\001\001\000\012\006\076\007\043" +
    "\010\044\034\041\001\001\000\012\006\075\007\043\010" +
    "\044\034\041\001\001\000\012\006\074\007\043\010\044" +
    "\034\041\001\001\000\012\006\073\007\043\010\044\034" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\072\007\043\010\044\034\041\001\001\000\012\006" +
    "\071\007\043\010\044\034\041\001\001\000\012\006\070" +
    "\007\043\010\044\034\041\001\001\000\012\006\067\007" +
    "\043\010\044\034\041\001\001\000\012\006\066\007\043" +
    "\010\044\034\041\001\001\000\012\006\065\007\043\010" +
    "\044\034\041\001\001\000\012\006\064\007\043\010\044" +
    "\034\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\100" +
    "\001\001\000\012\006\101\007\043\010\044\034\041\001" +
    "\001\000\004\041\102\001\001\000\002\001\001\000\004" +
    "\035\107\001\001\000\004\035\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\110\007\043\010\044" +
    "\034\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\113\001\001\000\006\017\115\036\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\140\011" +
    "\133\012\124\020\123\021\127\022\122\024\126\026\137" +
    "\030\134\032\141\033\117\037\130\001\001\000\004\034" +
    "\202\001\001\000\002\001\001\000\006\045\170\046\172" +
    "\001\001\000\002\001\001\000\030\005\140\011\133\012" +
    "\124\021\166\022\122\024\126\026\137\030\134\032\141" +
    "\033\117\037\167\001\001\000\006\013\026\014\023\001" +
    "\001\000\006\050\162\051\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\156\001\001" +
    "\000\002\001\001\000\004\047\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\142\001\001\000\012" +
    "\006\143\007\043\010\044\034\041\001\001\000\004\035" +
    "\144\001\001\000\004\025\146\001\001\000\004\044\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\163\007\043\010\044\034\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\174\007\043" +
    "\010\044\034\041\001\001\000\002\001\001\000\012\006" +
    "\176\007\043\010\044\034\041\001\001\000\004\041\177" +
    "\001\001\000\002\001\001\000\012\006\201\007\043\010" +
    "\044\034\041\001\001\000\002\001\001\000\004\023\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\206\007\043\010\044\034\041\001\001\000\004\035\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\215\001\001\000\002" +
    "\001\001\000\004\035\216\001\001\000\006\017\217\036" +
    "\116\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserFOut$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserFOut$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserFOut$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerFOut s;
    int nIB = 2;
    WordPainter painter;
    @SuppressWarnings("deprecation")
    public ParserFOut(ScannerFOut s, WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left, sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserFOut$actions {
  private final ParserFOut parser;

  /** Constructor */
  CUP$ParserFOut$actions(ParserFOut parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserFOut$do_action_part00000000(
    int                        CUP$ParserFOut$act_num,
    java_cup.runtime.lr_parser CUP$ParserFOut$parser,
    java.util.Stack            CUP$ParserFOut$stack,
    int                        CUP$ParserFOut$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserFOut$result;

      /* select the action based on the action number */
      switch (CUP$ParserFOut$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)).value;
		RESULT = start_val;
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserFOut$parser.done_parsing();
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= INSTSGLOBAL 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
painter.RW2(ileft, iright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTGLOBAL ::= RW_include NT$0 TK_include 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.STRING(tleft, tright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTGLOBAL ::= DECLFUNC 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= DEFFUNC 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTGLOBAL ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTGLOBAL ::= error 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CALLFUNC ::= IDCOLORUSEFNC COLORLPAR COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("CALLFUNC",3, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDCOLORUSEFNC ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.USEFNC(idleft, idright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("IDCOLORUSEFNC",22, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLID ::= TYPE INITIDS TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("DECLID",7, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INITIDS ::= INITIDS TK_comma INITID 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INITIDS",9, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INITIDS ::= INITID 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INITIDS",9, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INITID ::= TK_id NT$1 COLORLBRK EXP COLORRBRK 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)).value;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INITID",10, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INITID ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INITID",10, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("DECLFUNC",11, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("DEFFUNC",12, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFFUNC ::= TYPE IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("DEFFUNC",12, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDCOLORFNC ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("IDCOLORFNC",21, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VOIDCOLOR ::= RW_void 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.RW3(vdleft, vdright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("VOIDCOLOR",23, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR GOTO 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              String RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
painter.RW2(gleft, gright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GOTO ::= RW_goto NT$2 TK_id 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).value;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("GOTO",19, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IFCOLOR ::= RW_if 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.RW2(ileft, iright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("IFCOLOR",24, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
painter.USEVARIABLE2(idleft, idright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // REASIGN ::= TK_id NT$3 COLORLBRK EXP COLORRBRK TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-6)).value;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("REASIGN",20, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-6)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
painter.USEVARIABLE2(idleft, idright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REASIGN ::= TK_id NT$4 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).value;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("REASIGN",20, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PRINTF ::= PRINTCOLOR COLORLPAR FORMAT TK_comma EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("PRINTF",16, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-6)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FORMAT ::= TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.STRING(trleft, 1); painter.VARIABLE(trleft + 1, trright - 1); painter.STRING(trleft + trright - 1, 1); 
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("FORMAT",17, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRINTCOLOR ::= RW_printf 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.USEFNC(pleft, pright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("PRINTCOLOR",25, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ENV ::= COLORLBRC INSTRUCTIONS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("ENV",13, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ENV ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("ENV",13, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",14, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",14, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCTION ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCTION ::= IFSTRUCT TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCTION ::= CALLFUNC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCTION ::= PRINTF 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCTION ::= TK_id TK_colon 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$5 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCTION ::= RW_goto NT$5 TK_id TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).value;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$6 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCTION ::= RW_return NT$6 EXP TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).value;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$7 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRUCTION ::= RW_return NT$7 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)).value;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TYPE ::= RW_int 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.RW3(tpleft, tpright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.RW3(tpleft, tpright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TYPE ::= RW_float 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.RW3(tpleft, tpright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= COLORLPAR TYPE COLORRPAR EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$8 ::= 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
painter.USEVARIABLE2(trleft, trright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= TK_id NT$8 COLORLBRK EXP COLORRBRK 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-3)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)).value;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-4)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.USEVARIABLE2(trleft, trright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.NUMBER(trleft, trright);      
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= TK_float 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.NUMBER(trleft, trright);      
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",5, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",5, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",5, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",5, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARITHMETICS ::= EXP TK_mod EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",5, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",5, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-1)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("RELATIONALS",6, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("RELATIONALS",6, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("RELATIONALS",6, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("RELATIONALS",6, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("RELATIONALS",6, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("RELATIONALS",6, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.elementAt(CUP$ParserFOut$top-2)), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COLORLBRK ::= TK_lbrk 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("COLORLBRK",30, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COLORRBRK ::= TK_rbrk 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("COLORRBRK",31, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COLORLBRC ::= TK_lbrc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("COLORLBRC",28, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COLORRBRC ::= TK_rbrc 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("COLORRBRC",29, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COLORLPAR ::= TK_lpar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("COLORLPAR",26, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COLORRPAR ::= TK_rpar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserFOut$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserFOut$result = parser.getSymbolFactory().newSymbol("COLORRPAR",27, ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserFOut$stack.peek()), RESULT);
            }
          return CUP$ParserFOut$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserFOut$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserFOut$do_action(
    int                        CUP$ParserFOut$act_num,
    java_cup.runtime.lr_parser CUP$ParserFOut$parser,
    java.util.Stack            CUP$ParserFOut$stack,
    int                        CUP$ParserFOut$top)
    throws java.lang.Exception
    {
              return CUP$ParserFOut$do_action_part00000000(
                               CUP$ParserFOut$act_num,
                               CUP$ParserFOut$parser,
                               CUP$ParserFOut$stack,
                               CUP$ParserFOut$top);
    }
}

}
